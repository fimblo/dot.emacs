#+TITLE:      My Emacs setup
#+AUTHOR:     Mattias Jansson (fimblo)
#+EMAIL:      fimblo@yanson.org

* Initial setup
** Set up basic environment

   Before we can go about fixing the fun parts of emacs, we'll need to
   set up some basics.

#+BEGIN_SRC emacs-lisp
(require 'cl)
(setq message-log-max (- (expt 2 15) 1))

(defvar home (getenv "HOME") "Home directory, sourced from Environment variable HOME")
(setq default-directory (concat home "/"))

(defvar hostname (getenv "HOSTNAME") "This machine's hostname")

(setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
(setq exec-path (append exec-path '("/usr/local/bin")))

(setq locale-coding-system	'utf-8)
(set-terminal-coding-system	'utf-8)
(set-keyboard-coding-system	'utf-8)
(set-selection-coding-system	'utf-8)
(prefer-coding-system		'utf-8)
(set-language-environment       "UTF-8")
#+END_SRC

** Package.el configuration
   This needs to be in place before any configurations of installed packages.

   Most of this was shamelessly copied from @jeekl's [[https://github.com/jeekl/dotfiles/blob/master/emacs.d/emacs.org][emacs setup]]. Thanks @jeekl!
#+BEGIN_SRC emacs-lisp

;; mkdir these and add them to load path
(dolist (path '(  "~/.emacs.d/elpa/"
		  "~/.emacs.d/el-get/"
		  "~/.emacs.d/vendor/"))
  (make-directory path t)
  (let ((default-directory path))
    (normal-top-level-add-subdirs-to-load-path)))

(require 'package)

;; add these sources
(eval-after-load "package"
  '(progn
     (add-to-list 'package-archives '("org"	  . "http://orgmode.org/elpa/"))
     (add-to-list 'package-archives '("melpa"	  . "http://melpa.milkbox.net/packages/"))
     (add-to-list 'package-archives '("elpa"	  . "http://elpa.gnu.org/packages/"))
     (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
     (add-to-list 'package-archives '("tromey"	  . "http://tromey.com/elpa/"))
))

(setq url-http-attempt-keepalives nil)	; A package.el bug. Apparently.

(defvar elpa-packages
  '(
    adoc-mode
    apache-mode
    color-theme
    color-theme-approximate
    column-marker
    edit-server
    gmail-message-mode
    graphviz-dot-mode
    highlight-tail
    htmlize
    mediawiki
    mpg123
    muttrc-mode
    org-bullets
    puppet-mode
    rainbow-mode
    ssh-config-mode
    twittering-mode
    yaml-mode
    json-mode
    )
  "These packages are installed if necessary."
  )

(if (not package-archive-contents)
    (package-refresh-contents))

(dolist (pkg elpa-packages)
  (when (and (not (package-installed-p pkg))
           (assoc pkg package-archive-contents))
    (package-install pkg)))

    
(defun package-list-unaccounted-packages ()
  "Like `package-list-packages', but shows only the packages that
  are installed and are not in `elpa-packages'.  Useful for
  cleaning out unwanted packages."
  (interactive)
  (package-show-package-list
   (remove-if-not (lambda (x) (and (not (memq x elpa-packages))
				   (not (package-built-in-p x))
				   (package-installed-p x)))
                  (mapcar 'car package-archive-contents))))

#+END_SRC

** Auto-customization

   Move all customization stuff to another file. I don't want it
   cluttering my stuff.

#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file 'noerror)
#+END_SRC
** Emacs server

   The emacs server is useful if you use emacs for many things, and
   you want each session to share buffers and state. Startup time is
   minimal too.

#+BEGIN_SRC emacs-lisp
(require 'server)
(defadvice server-create-window-system-frame
  (after set-window-system-frame-colours ())
  "Set custom frame colours when creating the first frame on a display"
  (message "Running after frame-initialize")
  (setup-window-system-frame-colours))
(ad-activate 'server-create-window-system-frame)
(add-hook 'after-make-frame-functions 'setup-window-system-frame-colours t)
#+END_SRC
* UI
  This is the first round of setting up the UI.
** Basic look and feel
#+BEGIN_SRC emacs-lisp
(setq default-major-mode 'org-mode)     ; default mode is org-mode

(setq fci-rule-column 80)               ; fill column
(setq inhibit-startup-message t)        ; no startup message
(setq line-number-mode t)               ; show line number
(setq column-number-mode t)             ; show current column
(global-font-lock-mode 1)               ; syntax highlightning ON
(setq transient-mark-mode t)            ; turn on transient-mark-mode
(setq indicate-buffer-boundaries t)     ; visually show end of buffer
(setq-default indicate-empty-lines t)   ; be even more obvious about it
(setq remove-help-window t)             ; kill completion-window when
                                        ; leaving minibuffer
(setq insert-default-directory t)       ; get default dir in commands
(setq enable-local-variables t)         ; enables local variables
(setq compilation-window-height 10)     ; height of compilation window.
(setq default-cursor-type 'bar)         ; make cursor thin
(tool-bar-mode -1)
(menu-bar-mode -1)
(if (boundp 'fringe-mode) (fringe-mode -1))
(if (boundp 'scroll-bar-mode) (scroll-bar-mode -1))
#+END_SRC

** Changes in default behaviour upon user action

#+BEGIN_SRC emacs-lisp
(setq case-fold-search t)			; ignore case in searches
(setq compilation-ask-about-save 0)		; dont ask to save when compiling
(setq apropos-do-all t)				; show all funcs/vars in help
(put 'downcase-region 'disabled nil)		; allow downcase-region commands
(put 'upcase-region 'disabled nil)		; allow downcase-region commands

(setq next-line-add-newlines t)			; C-n at eob opens new lines.
(setq scroll-step 1)				; Moving cursor down at bottom
						; scrolls only a single line

(defun my-dummy-ring-bell-function () nil)	; replace beep with visible bell
(setq ring-bell-function `my-dummy-ring-bell-function)

(fset 'yes-or-no-p 'y-or-n-p)                   ; y or n instead of yes or no
(setq confirm-nonexistent-file-or-buffer nil)	; just open new buffers
(setq kill-buffer-query-functions               ; dont ask to kill live buffers
  (remq 'process-kill-buffer-query-function
         kill-buffer-query-functions))
(put 'eval-expression 'disabled nil)            ; no confirm on eval-expression

#+END_SRC

** Mouse support
#+BEGIN_SRC emacs-lisp
(xterm-mouse-mode t)                  ; Support mouse in xterms
(setq mouse-wheel-mode t)             ; support mouse wheel
(setq mouse-wheel-follow-mouse t)     ; scrolls mouse pointer position, not pointer
#+END_SRC
   
** Time display
#+BEGIN_SRC emacs-lisp
(display-time)
(setq display-time-day-and-date t)
(setq display-time-24hr-format t)
#+END_SRC

** Colors, fonts and stuff
#+BEGIN_SRC emacs-lisp

;; text-modes can use Iosevka. fix later.
;;(set-face-attribute 'default nil :family "Iosevka" :height 130)
;;(set-face-attribute 'fixed-pitch nil :family "Iosevka")
;;(set-face-attribute 'variable-pitch nil :family "Baskerville")

(set-face-foreground 'default "grey90")
(set-face-background 'default "grey20")
(set-face-background 'region "grey30")
#+END_SRC

** CUA-mode
   Cua-mode is normally used to make emacs act more like Windows
   (control-c to copy, etc). I use a subset so that I can use
   Cua-mode's nice rectangle functions in addition to the normal ones.

   Cua's global-mark is really cool. This is what it says in the manual:

#+begin_quote
CUA mode also has a global mark feature which allows easy moving and
copying of text between buffers. Use C-S-<SPC> to toggle the global
mark on and off. When the global mark is on, all text that you kill or
copy is automatically inserted at the global mark, and text you type
is inserted at the global mark rather than at the current position.
#+end_quote

   Really useful for copying text from one doc to another.

#+BEGIN_SRC emacs-lisp
(cua-mode t)
(setq cua-enable-cua-keys nil)               ; go with cua, but without c-x/v/c et al
(setq shift-select-mode nil)                 ; do not select text when moving with shift.
(setq cua-delete-selection nil)              ; dont kill selections on keypress
(setq cua-enable-cursor-indications t)       ; customize cursor color

;; if Buffer is...
(setq cua-normal-cursor-color "#15FF00")     ; R/W, then cursor is green
(setq cua-read-only-cursor-color "purple1")  ; R/O, then cursor is purple
(setq cua-overwrite-cursor-color "red")      ; in Overwrite mode, cursor is red
(setq cua-global-mark-cursor-color "yellow") ; in Global mark mode, cursor is yellow

#+END_SRC

** Indentation
#+BEGIN_SRC emacs-lisp
(setq standard-indent 2)
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq tab-width 4)
(setq-default tab-stop-list
  (mapcar '(lambda (x) (* x 4))
	(cdr (reverse 
	      (let (value)
		(dotimes (number 32 value)
		  (setq value (cons number value))))))))


(setq perl-continued-brace-offset -2)
(setq perl-continued-statement-offset 2)
(setq perl-indent-level 2)
(setq perl-label-offset -1)
(setq sh-basic-offset 2)
(setq sh-indentation 2)
#+END_SRC

** External stuff
#+BEGIN_SRC emacs-lisp
(setq tramp-default-method "ssh")    ; we use ssh when tramping

;; What browser to use?
(if (eq system-type 'darwin)
    (setq browse-url-browser-function 'browse-url-default-macosx-browser)
  (setq browse-url-browser-function 'browse-url-chromium)
  )
#+END_SRC
** Map Suffixes with modes
#+BEGIN_SRC emacs-lisp
(setq auto-mode-alist
      (append
       (list
        '("\\.xml"                . xml-mode             )
        '("\\.pp"                 . puppet-mode          )
        '("\\.html"               . html-mode            )
        '("\\.xsl"                . xml-mode             )
        '("\\.cmd"                . cmd-mode             )
        '("\\.bat"                . cmd-mode             )
        '("\\.wiki"               . wikipedia-mode       )
        '("\\.org.txt"            . org-mode             )
        '("\\.txt"                . indented-text-mode   )
        '("\\.php"                . php-html-helper-mode )
        '("\\.fvwm2rc"            . shell-script-mode    )
        '("tmp/mutt-"             . message-mode         )
        '("\\.org"                . org-mode             )
        '("\\.asciidoc"           . adoc-mode            )
        '("\\.pm"                 . cperl-mode           )
        '("\\.pl"                 . cperl-mode           ))
       auto-mode-alist))

;; and ignore these suffixes when expanding
(setq completion-ignored-extensions
      '(".o" ".elc" ".class" "java~" ".ps" ".abs" ".mx" ".~jv" ))
#+END_SRC
** Other UI things
   Things don't really fit anywhere else at the moment.

#+BEGIN_SRC emacs-lisp
;; make scripts executable if they aren't already
(add-hook 'after-save-hook
          'executable-make-buffer-file-executable-if-script-p)

#+END_SRC
* Org-mode
** Org-babel 
  I'll put the org-babel configuration here at the top until I have a section for org-mode.

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

